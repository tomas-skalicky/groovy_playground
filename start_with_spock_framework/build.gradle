// Logging
logging.captureStandardOutput LogLevel.WARN
println 'A message which is logged at WARN level'

apply from: 'libraries.gradle'

buildscript {
    apply from: 'libraries.gradle'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies { classpath libraries.gradle_versions_plugin }
}


apply plugin: 'groovy'
apply plugin: 'com.github.ben-manes.versions'


sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories { mavenCentral() }

// https://docs.gradle.org/current/userguide/dependency_management.html#component_selection_rules
allprojects {
    configurations {
        all {
            resolutionStrategy {
                componentSelection {
                    all { ComponentSelection selection ->
                        boolean rejected = ['alpha', 'beta', 'rc'].any { qualifier ->
                            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                        }
                        if (rejected) {
                            selection.reject('Release candidate')
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    // To avoid dependency conflicts, delete a line <classpathentry exported="true" kind="con" path="GROOVY_SUPPORT"/> from .classpath
    // see http://blog.pdark.de/2014/12/08/groovy-lang-groovyruntimeexception-conflicting-module-versions-module-groovy-all-is-loaded-in-version-2-1-8-and-you-are-trying-to-load-version-2-1-9/
    compile libraries.groovy_all

    testCompile libraries.hamcrest_all
    testCompile libraries.junit
    testCompile libraries.spock_core
}

test {
    testLogging {
        showExceptions = true
        showStackTraces = true
        showCauses = true
        exceptionFormat = 'full'
    }

    // Listens to events in the test execution lifecycle
    beforeTest { testDescriptor ->
        logger.lifecycle("Test ${testDescriptor} is running...")
    }

    // Listens to standard out and standard error of the test JVM(s)
    onOutput { testDescriptor, testOutputEvent ->
        logger.lifecycle("Test ${testDescriptor} wrote on ${testOutputEvent.destination}: ${testOutputEvent.message}")
    }

    afterTest { testDescriptor, testResult ->
        logger.lifecycle("Test ${testDescriptor}: result was ${testResult}.")
    }
}


task wrapper(type: Wrapper) {

    // The distribution will be unpacked to the $USER_HOME/.gradle/gradle/dists
    archiveBase = Wrapper.PathBase.GRADLE_USER_HOME
    archivePath = 'gradle/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-2.13-all.zip'
}
